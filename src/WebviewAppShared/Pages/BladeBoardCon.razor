@page "/"
@using System.ComponentModel.DataAnnotations
@using Ultron.BladeBoard.Abstraction
@using Ultron.BladeBoard.Abstraction.DataObjects
@inject IBladeBoardDriver _bladeBoardDriver
@inject NavigationManager _navigationManager
<div style="margin: 10px">
    <h2> 打开测刀板串口</h2>
</div>
<EditForm Model="@_configModel" OnValidSubmit="OnFinish">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="端口数字" HelperText="不要Com"
                                  @bind-Value="_configModel.Port" For="@(() => _configModel.Port)" />
                    <MudTextField Label="波特率" Class="mt-3"
                                  @bind-Value="_configModel.BaudRate" For="@(() => _configModel.BaudRate)" />
                    <MudTextField Label="通信间隔" HelperText="Sleep时间，毫秒" Class="mt-3"
                                  @bind-Value="_configModel.TimeInterval" For="@(() => _configModel.TimeInterval)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">连接</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

    </MudGrid>
    <MudOverlay Visible="_loading" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudOverlay>
</EditForm>
@code {
    public class ConfigModel
    {
        [Required]
        [Range(1, 20)]
        public int Port { get; set; } = 5;

        [Required]
        public int BaudRate { get; set; } = 9600;

        [Required]
        public int TimeInterval { get; set; } = 50;
    }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    private ISnackbar Snackbar { get; set; }
    private async Task OnFinish()
    {
        _loading = true;
        try
        {
            await Task.Run(() =>
            {
                if (_bladeBoardDriver.IsConnected) return;
                _bladeBoardDriver.Connect(new ConnectParameter()
                    {
                        BaudRate = _configModel.BaudRate,
                        CommunicationInterval = _configModel.TimeInterval,
                        ComPort = _configModel.Port
                    });
            });
        }
        catch (Exception e)
        {
            Snackbar.Add($"连接串口错误：{e.Message}", Severity.Error);
            _loading = false;
            StateHasChanged();
            return;
        }
        NavigationManager.NavigateTo("/BladeBoardDetail");
    }
    private bool _loading;
    private readonly ConfigModel _configModel = new();
}
